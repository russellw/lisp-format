(defun err(msg)
  (princ msg)
  (quit))

;http://www.lispworks.com/documentation/lw50/CLHS/Body/02_ad.htm
(defun syntax-type(c)
  (cond
    ((eql c #\backspace)
      'constituent)
    ((eql c #\tab)
      'whitespace)
    ((eql c #\newline)
      'whitespace)
    ((eql c #\linefeed)
      'whitespace)
    ((eql c #\page)
      'whitespace)
    ((eql c #\return)
      'whitespace)
    ((eql c #\space)
      'whitespace)
    ((eql c #\!)
      'constituent)
    ((eql c (char "\"" 0))
      'terminating-macro-char)
    ((eql c #\#)
      'non-terminating-macro-char)
    ((eql c #\$)
      'constituent)
    ((eql c #\%)
      'constituent)
    ((eql c #\&)
      'constituent)
    ((eql c (char "'" 0))
      'terminating-macro-char)
    ((eql c (char "(" 0))
      'terminating-macro-char)
    ((eql c (char ")" 0))
      'terminating-macro-char)
    ((eql c #\*)
      'constituent)
    ((eql c #\+)
      'constituent)
    ((eql c (char "," 0))
      'terminating-macro-char)
    ((eql c #\-)
      'constituent)
    ((eql c #\.)
      'constituent)
    ((eql c #\/)
      'constituent)
    ((char<= #\0 c #\9)
      'constituent)
    ((eql c #\:)
      'constituent)
    ((eql c (char ";" 0))
      'terminating-macro-char)
    ((eql c #\<)
      'constituent)
    ((eql c #\=)
      'constituent)
    ((eql c #\>)
      'constituent)
    ((eql c #\?)
      'constituent)
    ((eql c #\@)
      'constituent)
    ((char<= #\A c #\Z)
      'constituent)
    ((eql c #\[)
      'constituent)
    ((eql c (char "\\" 0))
      'single-escape)
    ((eql c #\])
      'constituent)
    ((eql c #\^)
      'constituent)
    ((eql c #\_)
      'constituent)
    ((eql c (char "`" 0))
      'terminating-macro-char)
    ((char<= #\a c #\z)
      'constituent)
    ((eql c #\{)
      'constituent)
    ((eql c (char "|" 0))
      'multiple-escape)
    ((eql c #\})
      'constituent)
    ((eql c #\~)
      'constituent)
    ((eql c #\rubout)
      'constituent)
  )
)

;tokenizer
(defvar *tok* nil)

(defun single-escape()
                                  (if (eql(peek-char)(char"\\"0))
                                    (list(read-char)(read-char))
                                    (list(read-char))))

(defun multiple-escape()
          (if (eql(peek-char)(char"\\"0))
            (append
                        (list(read-char))
                        (loop
                          until (eql(peek-char)(char"|"0))
                          append(single-escape)
                        )
                        (list(read-char))
            )
            (list(read-char))
          )
)

(defun lex()
  (cond
    ((not(peek-char t *standard-input* nil))
      (setf *tok* nil))

    ;comment
    ((eql(peek-char)(char";"0))
    (setf *tok* (read-line))
    )

    ;number or symbol
    ((member(syntax-type(peek-char))(list 'constituent 'single-escape 'multiple-escape))
      (setf *tok*
                (coerce
                    (loop
                      while(member(syntax-type(peek-char))(list 'constituent 'single-escape 'multiple-escape 'non-terminating-macro-char))
                      append(multiple-escape)
                    )
                  'string
                )
      )
    )

    ;other
    (t
      (setf *tok* (string(read-char)))
    )
  )
)

;parser
(defun unescape-token(s)
  (let ((i 0))
    (labels
      (
        (readc()
              (let ((c(char s i)))
                (incf i)
                c
              )
        )
        (escape()
          (cond
            ((eql (char s i) (char "|" 0))
              (incf i)
              (let((r
                      (loop
                        until(eql (char s i) (char "|" 0))
                        if(eql (char s i) (char "\\" 0))
                          do(incf i)
                        collect(readc)
                      )
                   ))
                 (incf i)
                 r)
            )
            ((eql (char s i) (char "\\" 0))
              (incf i)
              (list(readc))
            )
            (t
              (list (char-upcase (readc)))
            )
          )
        )
      )
      (coerce
      (loop
        while (< i (length s))
        append(escape)
      )
      'string)
    )
  )
)

(defun read*()
  (cond
    ((not *tok*)
      (err "unexpected end of file"))
    (t
      (let ((s(unescape-token *tok*)))
        (lex)
        s
      )
    )
  )
)

(defun read-all()
  (loop
    while *tok*
    collect (read*)
  )
)

(defun line-comment-reader (*standard-input* c)
  (list +line-comment+ (concatenate 'string (string c) (read-line *standard-input* nil #\Newline t))))

(defun feature-test-reader (*standard-input* c x)
  (declare (ignore c x))
  (list +feature-test+ (read *standard-input* t nil t) (read *standard-input* t nil t)))

(defun read-file (file)
  (with-open-file (*standard-input* file)
    ;(set-macro-character (char ";" 0) #'line-comment-reader)
    ;(set-dispatch-macro-character #\# #\+ #'feature-test-reader)
    (loop
      for x = (read *standard-input* nil *standard-input*)
      until (eq x *standard-input*)
      collect x)))
